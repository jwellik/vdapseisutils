import os
import datetime
import numpy as np

from vdapseisutils.sandbox import velocity as vmodels
from vdapseisutils.utils.obspyutils.inventoryutils import inventory2df
from vdapseisutils.utils.geoutils import dd2dms


########################################################################################################################
### UTILS

# Used by both ewutils and nllutils
def print_and_write(data_lines, header="", source="", name="", verbose=True, outfile=None):
    """Completes header and concatenates it to the data lines"""

    # Populate header and concatenate to data
    header = header.format(source=source, name=name, datetime=datetime.datetime.now())  # This is safe to do if header, name, etc aren't included
    template = "{header}{data_lines}".format(header=header, data_lines=data_lines)

    # print and write
    if verbose:
        print(template)
        print()
    if outfile:
        os.makedirs(os.path.dirname(outfile), exist_ok=True)  # ensure that the file and abspath exist
        with open(outfile, "w") as f:
            f.write(template)


########################################################################################################################
### VELOCITY MODELS

def lay(depth, Vp_top, verbose=True, outfile=None):
    """Prints Earthworm layer commands"""

    header = ["# Earthworm 'lay' commands for ew_binder.d"]

    # Store the layer commands in a list
    layer_commands = []
    for d, v in zip(depth, Vp_top):
        layer_commands.append("lay {:>6.4f}  {:>6.4f}".format(d, v))

    # # Print the layer commands to the console or a file
    # if verbose:
    #     for command in header + layer_commands:
    #         print(command)
    # if outfile:
    #     with open(outfile, 'w') as f:
    #         for command in header + layer_commands:
    #             f.write(command + '\n')
    print_and_write(layer_commands, verbose=verbose, outfile=outfile)

def velocityd(depth=None, velocity=None,
              verbose=True, outfile=None):
    """
    lay   0.0  5.40
    lay   4.0  6.38
    lay   9.0  6.59
    lay  16.0  6.73
    lay  20.0  6.86
    lay  25.0  6.95
    lay  41.0  7.80
    """

    if (depth is None) or (velocity is None):
        df = vmodels.default_velocity()
        velocity = df["Vp"]
        depth = df["LayerDepth"]

    template = "{layer_lines}"  # There is no header to this file

    layer_line = "lay  {:>4.1f} {:>4.2f}\n"
    layer_lines = ""
    for d, v in zip(depth, velocity):
        # layer_line.format(d, v)
        layer_lines += layer_line.format(d, v)

    # Fill template
    template = template.format(layer_lines=layer_lines)

    # Print and save
    print_and_write(template, header="", verbose=verbose, outfile=outfile)
    return template

def velocitycrh(depth=None, velocity=None,
              verbose=True, outfile=None,):
    """
    R0 Rabaul Generic
     1.7  0.0
     2.2  0.7
     3.5  1.0
     4.0  2.0
     4.5  3.0
     6.2  5.0
     6.4 15.0
    """

    if (depth is None) or (velocity is None):
        df = vmodels.default_velocity()
        vel = df["Vp"]
        depth = df["LayerDepth"]

    template = "{layer_lines}"  # There is no header to this file
    layer_line = " {:>4.2f} {:>4.1f}\n"  # Format for one line of velocity data
    layer_lines = ""  # initialize list of lines as empty string

    for d, v in zip(depth, velocity):
        # layer_line.format(v, d)
        layer_lines += layer_line.format(v, d)

    # Fill template
    template = template.format(layer_lines=layer_lines)

    print_and_write(template, header="", verbose=verbose, outfile=outfile)
    return template

########################################################################################################################
### STATION INVENTORIES

# CARLSTATRIG carl_StationFile (trig.sta)
carl_sta_header="""#
#
#   AUTO GENERATED by VDAPSEISUTILS
#   - Name    : {name}
#   - Source  : {source}
#   - Created : {datetime}
#
# Arbitrary Station Component Network Location Trigger
#           Code    Code      Code    Code     Time To Live
# --------- ------- ------- --------- -------- ------------
"""
# TODO Use carl_sta_header

def carl_StationFile(inventory, source="", name="", L=None, verbose=True, outfile=None):
    """

    :param invdf:
    :param filename:
    :param source:
    :param name:
    :param L: Optional overwrite for location code
    :return:
    """

    invdf = inventory2df(inventory)

    template = "{station_lines}"

    # Create station lines
    station_line = "  station   {sta:<7} {cha:<7} {net:<9} {loc:<8}   {ttime:<12}\n"  # One line of station data
    station_lines = ""  # initialize list of stations as empty

    # Populate each line of station data
    for idx, row in invdf.iterrows():
        net, sta, loc, cha = row["nslc"].split(".")
        loc = L if L is not None else loc
        station_lines += station_line.format(sta=sta, cha=cha, net=net, loc=loc, ttime=10)

    print_and_write(station_lines, header="# Earthworm configuration lines for carl modules (trig.sta)\n", verbose=verbose, outfile=outfile)
    return station_lines

# HYPOINVERSE hinv_site_file (sta.hinv)
hypo_inverse_header="""#
#
#   AUTO GENERATED by VDAPSEISUTILS
#   - Name    : {name}
#   - Source  : {source}
#   - Created : {datetime}
#
# HypoInverse site file
# http://folkworm.ceri.memphis.edu/ew-doc/USER_GUIDE/hypoinv_sta.html
"""
# TODO Use hypo_inverse_header
# TODO Actually HypoInverse site files can't have a header. Earthworm produces an error reading that line (maybe it's not fatal)

def hinv_site_file(inventory, L=None, source="", name="", verbose=True, outfile=None):
    # Create station lines
    # Hypoinverse station file docs: http://folkworm.ceri.memphis.edu/ew-doc/USER_GUIDE/hypoinv_sta.html
    #           1         2         3         4         5         6         7         8
    #  12345 78901234567890123456789012345678901234567890123456789012345678901234567890123
    #  AAAAA BB CDDD EFF GGGGGGGHIII JJJJJJJKLLLLMMM  NOPPPPP QQQQQ RRRRRSTTTTTUVWWWWWWXX
    # "ASBU  CC  BHE  43 49.2336N121 22.1041W15380.0  A  0.00  0.00  0.00  0.00 1      --"
    # "AAAAA BB CDDD EFF GGGGGGGHIII JJJJJJJKLLLLMMM  NOPPPPP QQQQQ RRRRRSTTTTTUVWWWWWWXX"
    #
    # F 16-17	I2, 1X	Latitude, degrees.
    # G 19-25	F7.4	Latitude, minutes.
    # H 26	    A1	    N or blank for north latitude, S for south.
    # I 27-29	I3, 1X	Longitude, degrees.
    # J 31-37	F7.4	Longitude, minutes.
    # K 38	    A1	    W or blank for west longitude, E for east.
    # L 39-42	4X	    Reserved for elevation in m. Not used by HYPOINVERSE.
    # X 82-82   A2      Location code, '--' is the same as '  '

    invdf = inventory2df(inventory)

    station_line = "{Asta:<5} {Bnet:<2} {Copt:1}{Dcha:<3} {Eweight:1}{Flatdeg:>2} {Glatmin:>7}{Hns:1}{Ilondeg:>3} {Jlonmin:>7}{Kew:1}{Lelev:>4}0.0  A  0.00  0.00  0.00  0.00 1      {Xloc:2}\n"
    station_lines = ""
    for idx, row in invdf.iterrows():
        net, sta, loc, cha = row["nslc"].split(".")
        loc = L if L is not None else loc
        # latdeg = np.abs(math.floor(row["latitude"]))
        # latmin = "{:>2.4f}".format((row["latitude"] % 1)*60)  # % 1 gets the decimal of a flat | *60 converts decimal degrees to minutes
        dms = dd2dms(row["latitude"])
        latdeg = int(np.abs(dms[0]))
        latmin = "{:>2.4f}".format(dms[1] + dms[2] / 60)
        ns = "N" if row["latitude"] >= 0 else "S"

        # londeg = np.abs(math.floor(row["longitude"]))
        # lonmin = "{:>2.4f}".format((row["longitude"] % 1) * 60)
        dms = dd2dms(row["longitude"])
        londeg = int(np.abs(dms[0]))
        lonmin = "{:>2.4f}".format(dms[1] + dms[2] / 60)
        ew = "E" if row["longitude"] >= 0 else "W"

        elev = int(row["elevation"])

        station_lines += station_line.format(Asta=sta, Bnet=net, Copt=" ", Dcha=cha, Eweight=" ",
                                             Flatdeg=latdeg, Glatmin=latmin, Hns=ns,
                                             Ilondeg=londeg, Jlonmin=lonmin, Kew=ew,
                                             Lelev=elev, Xloc=loc)

    print_and_write(station_lines, header="", verbose=verbose, outfile=outfile)

    return station_lines

# PICKEW pickew_StaFile pick_ew.sta
pick_ew_header = """#
#   AUTO GENERATED by VDAPSEISUTILS
#   - Name    : {name}
#   - Source  : {source}
#   - Created : {datetime}
#
#                     Station file for PICK_EW
#
#   http://folkworm.ceri.memphis.edu/ew-doc/cmd/pick_ew_cmd.html#station
#
#                 MinBigZC    RawDataFilt    LtaFilt         DeadSta          PreEvent
#  Station/  MinSmallZC   MaxMint        StaFilt       RmavFilt           AltCoda
#  Comp/Net  Itr1   MinPeakSize   CharFuncFilt  EventThresh          CodaTerm         Erefs
#  --------------------------------------------------------------------------------------
"""

def pickew_StaFile(inventory, L=None, source="", name="", verbose=True, outfile=None):
    # http://folkworm.ceri.memphis.edu/ew-doc/cmd/pick_ew_cmd.html#station

    """
    EXAMPLE LINES
    rabaul_params/params_generic/pick_ew_RVO.sta
        1   1   SPT   EHZ RV -- 3  40  3  20  500  0  .985  3.  .4  .015 5.  .9961  1200.  882.47  .8  1.5  50000. 2
        1   2   SDA   BHZ RV -- 3  40  3  20  500  0 0.882  3.  .4  .015 5.  .9961  1200.  429.73  .8  1.5  50000. 2048
        1   5   RAL   BHZ RV -- 3  40  3  20  500  0 0.882  3.  .4  .015 5.  .9961  1200.  429.73  .8  1.5  50000. 2048
        1   8   JBH   EHZ RV -- 3  40  3  20  500  0  .985  3.  .4  .015 5.  .9961  1200.  882.47  .8  1.5  50000. 2048
        1   9   KOR   EHZ RV -- 3  40  3  20  500  0  .985  3.  .4  .015 5.  .9961  1200.  882.47  .8  1.5  50000. 2
        1   10  TUN   EHZ RV -- 3  40  3  20  500  0  .985  3.  .4  .015 5.  .9961  1200.  882.47  .8  1.5  50000. 2048
        1   11  BMA   EHZ RV -- 3  40  3  20  500  0  .985  3.  .4  .015 5.  .9961  1200.  882.47  .8  1.5  50000. 2048
        1   12  VIS   BHZ RV -- 3  40  3  20  500  0 0.882  3.  .4  .015 5.  .9961  1200.  429.73  .8  1.5  50000. 2048
        1   15  RPT   EHZ RV -- 3  40  3  20  500  0  .985  3.  .4  .015 5.  .9961  1200.  882.47  .8  1.5  50000. 2048

    pnsn_params/params_generic/pick/pick_ew.sta
         1   501  GASB  BHZ BK 00 3  40  3  20  500  0 0.854  3.  .4  .015 5.  .9961  1200.  409.59  .8  1.5  50000. 23689428
    """

    # Create station lines (SCNL)
    channel_identification = "    {pick_flag:1}  {pin_numb:< 4}  {sta:<5} {cha:3} {net:2} {loc:2} "
    event_termination = " 3  40  3  20  500  0 "  # defaults
    waveform_filtering = "0.854  3.  .4  .015 5.  .9961  1200.  409.59  .8  1.5  50000. 2048"  # defaults
    pin_numb = 0  # initialize pin_numb as 0, will grow iteratively w each line

    station_line = channel_identification + event_termination + waveform_filtering + "\n"  # line for 1 station
    station_lines = ""  # initialize list of lines as empty

    invdf = inventory2df(inventory)
    for _, row in invdf.iterrows():
        pin_numb += 1
        net, sta, loc, cha = row["nslc"].split(".")
        loc = L if L is not None else loc
        station_lines += station_line.format(pick_flag=1, pin_numb=pin_numb,
                                             sta=sta, net=net, cha=cha, loc=loc)

    print_and_write(station_lines, header=pick_ew_header, source=source, name=name, verbose=verbose, outfile=outfile)
    return station_lines

# PICKFP pick_fp.sta
pick_fp_header = """#
#   AUTO GENERATED by VDAPSEISUTILS
#   - Name    : {name}
#   - Source  : {source}
#   - Created : {datetime}
#
#                     Station file for PICK_FP
#
#   http://folkworm.ceri.memphis.edu/ew-doc/cmd/pick_FP_cmd.html#station
#
# Pick  Pin     Sta/Comp           longTermWindow  tUpEvent
# Flag  Numb    Net/Loc       filterWindow  threshold2
# ----  ----    --------      -----------------------------
"""

def pickfp_StaFile(inventory, L=None, source="", name="", verbose=True, outfile=None):

    invdf = inventory2df(inventory)

    # Create station lines (SCNL)
    channel_identification = "    {pick_flag:1}  {pin_numb:< 4}  {sta:<5} {cha:3} {net:2} {loc:2}   "
    # event_termination = " 3  40  3  20  500  0 "
    # waveform_filtering = "0.854  3.  .4  .015 5.  .9961  1200.  409.59  .8  1.5  50000. 2048"
    tuning_parameters = "-1  -1   8.6  17.2   -1"

    station_line = channel_identification + tuning_parameters + "\n"
    station_lines = ""

    pin_numb = 0
    for idx, row in invdf.iterrows():
        pin_numb += 1
        net, sta, loc, cha = row["nslc"].split(".")
        loc = L if L is not None else loc
        station_lines += station_line.format(pick_flag=1, pin_numb=pin_numb,
                                             sta=sta, net=net, cha=cha, loc=loc)

    print_and_write(station_lines, header=pick_fp_header, source=source, name=name, verbose=verbose, outfile=outfile)
    return station_lines

# BINDER - Read from template

def binder_ew(template="./params_templates/binder_ew.d", site_file="utils/sta.hinv", velocityd="utils/velocity_model.d",
              lat=0.0, lon=0.0, radius=100, gridz=[0, 100],
              dspace=3.0, rstack=100, tstack=0.6, stack=100, thresh=16, focus=100,
              grid_wt=[4, 4, 4, 4],
              no_P_on_Horiz=True, no_S_on_Z=True,
              name=None,
              verbose=True, outfile=None):

    module_path = os.path.dirname(__file__)
    template_file = os.path.join(module_path, template)
    del template
    with open(template_file, "r") as f:
        template = f.read()

    # Define gassociation grid, set stacking parameters
    # determine grdlat minlat maxlat
    # determine grdlon minlon maxlon
    # determine grdz   minz   maxz
    from vdapseisutils.utils.geoutils import radial_extent2map_extent
    map_extent = radial_extent2map_extent(lat, lon, radius)
    minlon, maxlon, minlat, maxlat = map_extent
    minz, maxz = gridz

    # Set rstack
    # Set tstack
    # Set stack
    # Set thresh
    # Set focus

    # Writ grid_wt lines (loop through grid_wt)
    #  grid_wt 0  4
    #  grid_wt 1  4
    #  grid_wt 2  4
    #  grid_wt 3  4
    grid_wt_lines = ""
    for i, wt in enumerate(grid_wt):
        grid_wt_lines += f" grid_wt {i}  {wt}\n"

    # no_P_on_Horiz - Uncomment or comment
    # no_S_on_Z     - Uncomment or comment
    if no_P_on_Horiz:
        no_P_on_Horiz = "no_P_on_Horiz"
    else:
        no_P_on_Horiz = "# no_P_on_Horiz"
    if no_S_on_Z:
        no_S_on_Z = "no_S_on_Z"
    else:
        no_S_on_Z = "# no_S_on_Z"

    template = template.format(name=name, datetime=datetime.datetime.now(), site_file=site_file, velocityd=velocityd,
                    dspace=dspace, minlat=minlat, maxlat=maxlat, minlon=minlon, maxlon=maxlon, minz=minz, maxz=maxz,
                    rstack=rstack, tstack=tstack, stack=stack, thresh=thresh, focus=focus,
                    grid_wt_lines=grid_wt_lines,
                    no_P_on_Horiz=no_P_on_Horiz, no_S_on_Z=no_S_on_Z)

    # print and write
    if verbose:
        print(template)
        print()
    if outfile:
        os.makedirs(os.path.dirname(outfile), exist_ok=True)  # ensure that the file and abspath exist
        with open(outfile, "w") as f:
            f.write(template)

    return template


def carlsubtrig(template="./params_templates/carlsubtrig.d", StationFile="utils/trig.sta", subnets=None):
    pass


def fir(tempalte="./params_tempaltes/carlsubtrig.d", inventory=None):
    pass
